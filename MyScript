#!/bin/bash
#PROGRAMM FILE: MyScript
#PROGRAMMER: Abbasguliev Rolan

param1=$1
param2=$2
param3=$3
param4=$4

# COLORS # 
RED='\033[1;31m'
LBLUE='\033[1;34m'
WHITE='\033[1;37m'
YELLOW='\033[1;33m'
ORANGE='\033[0;33m'
NC='\033[0m'

isnum()
{
  #re='^[0-9]+$'
  if [ -n "$1" ] && [ "$1" -eq "$1" ] 2>/dev/null; then 
    return 0
  else
    return 1
  fi
}

calc()
{  
  call_math=$1
  arg1=$2
  arg2=$3 
  if ! $(isnum $arg1); then 
    echo -e "${RED}First argument is not number ${NC}"
    return 1
  fi
  if ! $(isnum $arg2); then
    echo -e "${RED}Second argument is not number${NC}"
    return 1
  fi
 
       
case $call_math in 
   sum)
     echo "RESULT: $(( arg1 + arg2 ))"
     ;;
   sub)
     echo "RESULT: $(( arg1 - arg2 ))"
     ;;
   mul) 
     echo "RESULT: $(( arg1 * arg2 ))"
     ;;
   div)			 	
     echo "RESULT: $(( arg1 / arg2 ))"
     ;;
   *)
     echo -e "${RED}CALC FUNCTION ERROR${NC}"    
     exit 1
     ;; 
esac	
}

search() 
{
  local file_name=$1
  local pattern=$2
  grep -r $pattern $file_name 
}

reverse()
{
  local file_f=$1
  local file_s=$2
  
  readarray arr < SearchMe/$file_f
  for ((i=${#arr[*]}; i >= 0; i--))
  do
    echo ${arr[$i]} >> SearchMe/$file_s
  done
}

strlen()
{ 
  echo | awk -v str="$1" '{ print "String: " str }
                  			   { print "RESULT: " length(str)}'
}

log()
{
  sed -n 's/(WW)/Warnings/gw war' /var/log/anaconda/X.log
  sed -n 's/(II)/Information/gw info' /var/log/anaconda/X.log
  cat info >> war  
  rm info
 # tail -f war | GREP_COLOR='01;36' egrep --color=always 'Warnings|$'
  GREP_COLOR="1;33" grep --color="always" "Warnings" war >> color  
  GREP_COLOR="1;34" grep --color="always" "Information" war >> color
  rm war  && head -n 7 color && tail -n 10 color && rm color 
 # echo "Warnings" | awk '{ gsub("Warnings", "\033[1;33m&\033[0m"); print }'
}

help()
{
   echo -e "
                                         ${WHITE}MANUAL${NC}
        ${YELLOW}=============================================================================${NC}
        ${LBLUE}calc${NC}    - sum/sub/mul/dib [num1] [num2] ${ORANGE}/* calculating numbers             */${NC}

        ${LBLUE}search${NC}  - [dir_name]  [reg_expresion]   ${ORANGE}/* search expresion type 
              	                                   in direcroty files              */${NC}   
        ${LBLUE}reverse${NC} - [file_name1] [file_name2]     ${ORANGE}/* reverse copy from   
                                                   file1 -> file2                  */${NC}
        ${LBLUE}strlen${NC}  - [string]                      ${ORANGE}/* string length                   */${NC}
    
        ${LBLUE}log${NC}     - none                          ${ORANGE}/* output line Warnings/Information
                                                   from /var/log/anaconda/X.log
                                                   [first 5, last 5] lines         */ ${NC}
      
        ${LBLUE}exit${NC}    - [return code]                 ${ORANGE}/* exit programm with code         */${NC}   

        ${YELLOW}=============================================================================${NC} "
}

exit_code() 
{
 if [ -z "$1" ]
 then  
   echo "exit code: 0"
   exit 0
 else
   echo "exit code: $1"
   exit $param2
  fi 
}

menu_draw()
{
  echo -e "
  a - calc
  b - search
  c - reverse
  d - strlen 
  e - log 
  f - exit
  g - help 
"
}

interactive()
{
  menu_draw
  read -r key
  
  case $key in 
  a | calc)
    echo -e "Input operation for numbers: \c"
    read -r oper
    echo -e  "Input first num: \c"
    read -r arg1
    echo -e "Input second num: \c"
    read -r arg2 
    calc "$oper" "$arg1" "$arg2" 
    interactive  
    ;;
  b | search)
    echo -e "Input dirictory name: \c"
    read -r dir_name
    echo -e "Input expresion: \c"
    read -r ex
    search "$dir_name" "$ex"   i
    interactive
    ;;
  c | reverse) 
    echo -e "Input first file name: \c"
    read -r file_f
    echo -e "Input second file name: \c"
    read -r file_s
    reverse "$file_f" "$file_s"
    interactive
    ;;
  d | strlen) 
    echo -e "Input string: \c" 
    read -r str 
    strlen "$str" 
    interactive
    ;;
  e | log)
    log 
    interactive 
    ;;
  f | exit)
    echo -e "Input parameter: \c"
    read -r input
    clear 
    exit_code "$input"
    ;;
  g | help)
    help
    interactive 
    ;; 
  *) 
    echo -e "${RED}NO SUCH KEY ${NC}"
    interactive
 esac
}

call_func=$1
param2=$2
 case $call_func in
  calc)
    clear
    calc "$2" "$3" "$4"
    ;;
  search)
    clear
    search "$2" "$3"
    ;;
  reverse)
    clear
    reverse "$2" "$3"
    ;;
  strlen)
    clear
    strlen "$2" 
    ;;
  log) 
    clear
    log 
    ;;
  exit)
    clear
    exit_code "$2"
    ;;
  help)
    clear
    help 
    ;; 
  interactive) 
    clear
    interactive
    ;; 
  *)
    clear
    help
    echo -e "${RED} YOU TYPED FUNCTION DOESN'T EXIST ${NC}"
    ;;
esac

